/**
 * 仅前端适用
 * 此工具方法中主要存放前端页面判断环境的一些方法
 */
/* eslint-disable */
export function isIOS() {
  const ua = window.navigator.userAgent
  return !!ua.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)
}

export function isIOS9() {
  return navigator.userAgent.indexOf('iPhone OS 9') > -1
}

export function isIOS8() {
  return navigator.userAgent.indexOf('iPhone OS 8') > -1
}

export function isMobile() {
  const ua = window.navigator.userAgent.toLowerCase()

  return !!ua.match(/applewebkit.*mobile.*/)
}

export function isAndroid() {
  const ua = window.navigator.userAgent.toLowerCase()
  // android终端或者uc浏览器
  return ua.indexOf('android') > -1 || ua.indexOf('linux') > -1
}

export function androidVersion() {
  const ua = window.navigator.userAgent.toLowerCase()
  return parseFloat(ua.substr(ua.search('android') + 8, 5))
}

export function hasWebSocket() {
  return window && !(!window.WebSocket || androidVersion() < 4.4)
}

export function isWeiXin() {
  const ua = navigator.userAgent.toLowerCase()
  return !!(/micromessenger/.test(ua))
}

export function isQQ() {
  const reg = new RegExp('qq/', 'g')
  const ua = navigator.userAgent.toLowerCase()
  return !!(reg.test(ua))
}

export function isIE() {
  return (!!window.ActiveXObject || 'ActiveXObject' in window)
}

export function closeKeyboard() {
  document.activeElement.blur()
  const inputs = document.querySelectorAll('input')
  for (let i = 0; i < inputs.length; i++) {
    inputs[i].blur()
  }
}

export function isIphoneX() {
  return isIOS() && window.screen.height === 812
}

export function isIphone5() {
  return isIOS() && window.screen.width === 320
}

/* eslint-enable */
