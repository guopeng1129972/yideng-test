import request from 'superagent'
import qs from 'qs'
import groom from 'groom'

async function requestService(url, method = 'GET', params = {}, headers = {}) {
  let ret = {}
  let query = {}
  let body = {}
  if (method === 'GET' || method === 'DELETE') {
    query = qs.stringify(params, { arrayFormat: 'repeat' })
  } else {
    body = params
  }
  try {
    const res = await request(method, url)
      .query(query)
      .send(body)
      .set(groom(headers))
      // 3s 内不返回的接口直接抛异常
      .timeout(3000)
    ret = res.text ? JSON.parse(res.text) : res.text
  } catch (err) {
    throw new Error(err.message)
  }
  return ret ? (ret.data || ret.obj || ret) : null
}

function fetch(url, params = {}, headers = {}) {
  return requestService(url, 'GET', params, headers)
}

fetch.get = (url, params = {}, headers = {}) => fetch(url, params, headers)
fetch.del = (url, params = {}, headers = {}) => requestService(url, 'DELETE', params, headers)
fetch.post = (url, params = {}, headers = {}) => requestService(url, 'POST', params, headers)
fetch.put = (url, params = {}, headers = {}) => requestService(url, 'PUT', params, headers)

export default fetch
