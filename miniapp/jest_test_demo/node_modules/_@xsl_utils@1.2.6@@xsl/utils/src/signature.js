import R from 'ramda'
import crypto from 'crypto'
import cookie from 'cookie'
import { reward } from './config'
import getLdapUserInfo from './ldap-user-info'

const { token, secret } = reward

const DR = 'dr'
const BUSINESS = 'business'
const BM = 'bm'

function getExtension(req, source) {
  const addressIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress
  let extension
  if (source === BUSINESS) {
    const { currentUser: { username: operatorName, id: operatorId } } = req.session
    extension = `${operatorId}:${operatorName}:${addressIP}:${source}`
    return extension
  } else if (source === BM) {
    const cookies = cookie.parse(R.path(['headers', 'cookie'], req))
    const lUsertoken = cookies['L-User-Token']
    const { operatorId, operatorNameEncode } = getLdapUserInfo(lUsertoken)
    extension = `${operatorId}:${operatorNameEncode}:${addressIP}:${source}`
    return extension
  } else if (source === DR) {
    const { admin: { username: operatorName, id: operatorId } } = req.session
    extension = `${operatorId}:${operatorName}:${addressIP}:${source}`
    return extension
  }
  return extension
}

export default async (ctx, source, logger = console) => {
  try {
    // 获取request
    let { req } = ctx
    if (!req) req = ctx
    // 时间戳
    const timestamp = Date.now()
    const md5 = crypto.createHash('md5')
    const signature = md5.update(`${token}${timestamp}${secret}`).digest('hex')
    let extension
    if (R.find(v => v === req.method.toUpperCase())(['POST', 'DELETE', 'PUT', 'DEL', 'PATCH'])) {
      extension = getExtension(req, source)
    }
    const addParams = {
      token,
      timestamp,
      signature,
      extension: extension || '',
    }
    req.headers = {
      ...req.headers,
      ...addParams,
    }
    return addParams
  } catch (e) {
    logger.error(e)
    return e
  }
}
