// 将微信服务器上的图片下载下来, 然后上传到qiniu
// 从微信服务器下载图片, 需要accesstoken
import request from 'axios'
import Promise from 'bluebird'
import qiniu from 'qiniu'
import uuid from 'uuid/v4'
import getWechatToken from './getWechatToken'
import sessionHeader from './sessionHeader'
import config from '../config'

// 构造上传函数
// 这里的key应该是userId/bizId/文件名
async function uploadFile(uptoken, key, stream) {
  const uploadConfig = new qiniu.conf.Config()
  uploadConfig.zone = qiniu.zone[config.qiniu.feedback.zone]
  const formUploader = new qiniu.form_up.FormUploader(uploadConfig)
  const putExtra = new qiniu.form_up.PutExtra()
  const { key: qiniuKey } = await Promise.promisify(
    formUploader.putStream
  ).bind(formUploader)(uptoken, key, stream, putExtra)
  return `${config.qiniu.feedback.domain}/${qiniuKey}`
}

/**
 * req.query -> { mediaId, bizUid }
 * @param req
 * @param res
 * @returns {Promise.<void>}
 */
export default async (req, res) => {
  try { // 获取qiniu uploadtoken, 这里由于是没有用户登录一说, 直接使用未登录sessionKey以及feedback bucket
    const sessionKey = (await sessionHeader())['X-User-Token']
    const { data: { obj: { token: uploadToken } } } = await request({
      method: 'get',
      url: `${config.qiniuDomain}/uploadToken`,
      params: {
        sessionKey,
        space: config.qiniu.feedback.bucket,
      },
    })
    // 获取微信服务器的图片
    const { wechatAccessToken } = await getWechatToken()
    const url = 'http://file.api.weixin.qq.com/cgi-bin/media/get'
    // 从微信服务器获取图片
    const resp = await request({
      method: 'get',
      url,
      params: {
        access_token: wechatAccessToken,
        media_id: req.query.mediaId,
      },
      responseType: 'stream',
    })
    const imgStream = resp.data
    // 为了保证图片名称唯一, 用一个uuid作为key
    const imgPath = await uploadFile(uploadToken, `${req.query.bizUid}/${uuid()}`, imgStream)
    res.json({
      imgPath,
    })
  } catch (e) {
    res.status(500).json({
      errorMsg: e.message,
    })
  }
}
