import R from 'ramda'
import uuid from 'uuid/v4'
import request from './request'
import { followup } from './config'

// placeholder 暂时不用, 应该是一个icon地址
export const sendLinkMessageToPatient = async ({ patientId, doctorId, title, placeholder = 'xxx', url }) => {
  if (!patientId || !doctorId) throw new Error('缺少医生id或者患者id')
  const requestUrl = `${followup.url}/content/inner/message`
  const resp = await request.post(requestUrl, {
    patientId,
    messageUid: uuid(),
    doctorId,
    content: {
      title,
      placeholder,
      url,
      formType: 'scale',
    },
  })
  return R.path(['id'])(resp)
}

export const sendLinkMessageToDoctor = async ({ patientId, title, placeholder = 'xxx', url }) => {
  if (!patientId) throw new Error('缺少患者id')
  if (!url) throw new Error('缺少链接url')
  const requestUrl = `${followup.url}/inner/message/doctor`
  const resp = await request.post(requestUrl, {
    patientId,
    messageUid: uuid(),
    content: {
      title,
      placeholder,
      url,
      formType: 'scale',
    },
    msgType: 'native-form',
  })
  return R.path(['id'])(resp)
}

// 新版患者信息 根据患者id获取患者信息
export const getPatienInfoByPatientId = async ({ patientId }) => {
  if (!patientId) throw new Error('缺少患者id')
  const requestUrl = `${followup.url}/inner/patient/${patientId}`
  const resp = await request.get(requestUrl)
  return resp
}

// 根据一组患者id获取患者信息。注意非一一对应，需手工对应！！！！
export const getPatienInfoByPatientIds = async ({ patientIds }) => {
  const resp = await request.get(`${followup.url}/inner/patient/ids/${patientIds}`)
  return resp
}

// 经典版患者信息
export const getV4PatientInfoByPatientId = async ({ patientId }) => {
  if (!patientId) throw new Error('缺少患者id')
  const requestUrl = `${followup.casefolder}/patient/detail/${patientId}`
  const resp = await request.get(requestUrl)
  return resp
}

// 获取医生下的有效患者列表
export const getPatientListByDoctorId = (doctorId) => {
  if (!doctorId) throw new Error('缺少doctorId')
  const requestUrl = `${followup.casefolder}/patient/list/${doctorId}`
  return request.get(requestUrl)
}

// 获取医生下的所有患者列表
export const getAllPatientByDoctorId = (doctorId) => {
  if (!doctorId) throw new Error('缺少doctorId')
  const requestUrl = `${followup.casefolder}/patient/list/${doctorId}?type=all`
  return request.get(requestUrl)
}

// 为医生创建患教
export const createPatientEducationWithDoctorId = ({ doctorId, resourceName, link, diseaseName }) => {
  if (!doctorId || !resourceName || !link || !diseaseName) throw new Error('参数错误')
  const requestUrl = `${followup.casefolder}/doctor/init/resource/${doctorId}`
  return request.post(requestUrl, {
    resourceName, link, diseaseName,
  })
}

// 发送随访消息
export const sendMessage = ({ content, openId }) => {
  if (!content || !openId) throw new Error('参数错误')
  return request.post(followup.message, {
    content,
    openid: openId,
    messageUid: Math.floor(Math.random() * 1000000000000000000), // 生成18位随机数字
  })
}
