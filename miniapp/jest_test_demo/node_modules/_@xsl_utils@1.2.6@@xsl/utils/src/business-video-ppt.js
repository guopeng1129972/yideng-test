import R from 'ramda'
import knex from 'knex'
import config from './config'

const bmDB = knex(config.bmDb)
const logger = global.logger || console.log

async function getVideoConfig(uid) {
  try {
    const record = (await bmDB('t_business_ppt').where({ uid }))[0]
    if (!record) {
      throw new Error(`表里没查到对应uid的配置，uid = ${uid}`)
    }
    return record
  } catch (e) {
    logger.error(`error in get video config, uid: ${uid}, ${e.stack}`)
    throw new Error('该项目无录课配置')
  }
}

async function getPptDetailByUid(pptUid) {
  const records = await bmDB('t_business_ppt as tp')
    .leftJoin('t_business_ppt_image as ti', 'tp.uid', 'ti.ppt_uid')
    .select('tp.uid as uid', 'tp.title as title', 'ti.url as url', 'ti.index as index')
    .where('tp.uid', pptUid)
    .andWhere('tp.status', 1)
  if (!records.length) {
    logger.error(`error in get ppt detail, pptUid = ${pptUid}`)
    throw new Error('无此ppt')
  }
  const images = records.filter(v => v.url).sort((v1, v2) => v1.index - v2.index).map(v => v.url)
  return { ...records[0], images }
}

async function getPptsDetailByUids(uids) {
  if (!uids || !uids.length) {
    logger.error('没有提供露可配置的uids')
    throw new Error('没有提供露可配置的uids')
  }

  const records = await bmDB('t_business_ppt as tp')
    .leftJoin('t_business_ppt_image as ti', 'tp.uid', 'ti.ppt_uid')
    .select('tp.uid as uid', 'tp.title as title', 'ti.url as url', 'ti.index as index')
    .whereIn('tp.uid', uids)
    .andWhere('tp.status', 1)
  const ppts = R.uniqWith((v1, v2) => v1.uid === v2.uid)(records).map(ppt => ({
    uid: ppt.uid,
    title: ppt.title,
    images: R.filter(record => record.uid === ppt.uid && record.url, records)
      .sort((v1, v2) => v1.index - v2.index)
      .map(v => v.url),
  }))
  return ppts
}

export default {
  getVideoConfig,
  getPptDetailByUid,
  getPptsDetailByUids,
}
