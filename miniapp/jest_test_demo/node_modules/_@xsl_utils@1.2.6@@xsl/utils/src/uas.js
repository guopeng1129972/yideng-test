import R from 'ramda'
import request from './request'
import { uas } from './config'

export const getUserInfoByIds = async (userIds, fields = []) => {
  const url = `${uas}/search/user/`
  const userIdArrs = R.splitEvery(20, userIds)
  const resp = await Promise.all(userIdArrs.map(ids => request.post(url, {
    userIds: ids,
    // fields: ['schools', 'hospitals', 'areaId', 'introduce', 'lastRealnameTimestamp'],
    fields,
  })))
  const userInfoMap = R.flatten(resp.map(R.prop('data'))).reduce((f, v) => ({
    ...f,
    [v.userId]: v,
  }), {})
  return userInfoMap
}

export const getUserInfoByMobile = async (mobile, fields = [
  'schools', 'hospitals', 'areaId', 'introduce', 'lastRealnameTimestamp']) => {
  const url = `${uas}/search/user/list`
  const resp = await request.post(url, {
    critical: [
      {
        field: 'account',
        type: 'term',
        value: mobile,
      },
    ],
    fields,
  })
  const userInfo = R.path(['data', 0], resp)
  return userInfo
}

export const temp = null
