const R = require('ramda')
const lang = require('./lang')

function stringify(o) {
  if (lang.isObject(o) || lang.isArray(o)) {
    try {
      return JSON.stringify(o)
    } catch (e) {
      // not handle
    }
  }
  return o
}

const trans = (transKey, transValue, obj) => R.reduce((acc, key) => {
  acc[transKey(key)] = transValue(obj[key])
  return acc
}, {}, R.keys(obj))

const toLower = R.compose(
  R.replace(/([A-Z])/g, (_, s) => `_${R.toLower(s)}`),
  R.replace(/^([A-Z])/, (_, s) => R.toLower(s)) // 第一个字母直接 toLower
)
function transformObjToDb(obj) {
  return trans(toLower, stringify, obj)
}

const toUpper = R.replace(/_(\w)/g, (_, s) => R.toUpper(s))
function transformDbToObj(obj) {
  return trans(toUpper, e => e, obj)
}

function zipAll(fun, ...arrs) {
  const len = Math.min(...(arrs.map((arr = []) => arr.length || 0)))
  return (R.repeat(1, len)).map((_, index) => fun(...(arrs.map((arr = []) => arr[index]))))
}

module.exports = {
  transformObjToDb,
  transformDbToObj,
  zipAll,
  toUpper,
  toLower,
}
