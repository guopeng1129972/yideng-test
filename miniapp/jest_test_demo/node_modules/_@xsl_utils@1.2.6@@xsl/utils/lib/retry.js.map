{"version":3,"sources":["../src/retry.js"],"names":["promise","times","errCount","retry"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;sFAWe;AAAA,QAAuBA,OAAvB,SAAuBA,OAAvB;AAAA,4BAAgCC,KAAhC;AAAA,QAAgCA,KAAhC,+BAAwC,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,oBADO,GACID,QAAQ,CADZ;AAAA;AAAA;AAAA,mBAGED,SAHF;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAKPE,YAAY,CALL;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMIC,MAAM,EAAEH,gBAAF,EAAWC,OAAOC,QAAlB,EAAN,CANJ;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,K;;;;SAAAA,K","file":"retry.js","sourcesContent":["/**\n * 重试一个promise 传入的参数应该是生成promise的方法 () => promise\n * 1. 如果正常返回, 返回结果\n * 2. 如果异常, 重试times次\n * 3. 重试过程中如果正常返回, 返回结果\n * 4. 如果全部重试都失败, 抛出异常\n *\n * @param promise: () => promise\n * @param times: 重试次数\n * @returns {Promise.<*>}\n */\nexport default async function retry({ promise, times = 3 }) {\n  const errCount = times - 1\n  try {\n    return await promise()\n  } catch (e) {\n    if (errCount >= 0) {\n      return await retry({ promise, times: errCount })\n    }\n    throw e\n  }\n}\n"]}