'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _winstonDailyRotateFile = require('winston-daily-rotate-file');

var _winstonDailyRotateFile2 = _interopRequireDefault(_winstonDailyRotateFile);

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createLogger = _winston2.default.createLogger,
    format = _winston2.default.format,
    transports = _winston2.default.transports,
    addColors = _winston2.default.addColors;
var combine = format.combine,
    timestamp = format.timestamp,
    printf = format.printf;

var myFormat = printf(function (info) {
  return new Date(info.timestamp).toLocaleString() + ' - ' + info.level + ': ' + info.message;
});
var myCustomLevels = {
  levels: {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3
  },
  colors: {
    debug: 'blue',
    info: 'cyan',
    warn: 'yellow',
    error: 'red'
  }
};

addColors(myCustomLevels.colors);

exports.default = function (projectName) {
  if (!projectName) {
    throw Error('logger缺少项目名称，请传入String(项目名)');
  }
  var filename = process.env.NODE_ENV === 'production' ? '/logs/' + projectName + '/' + projectName + '.log' : projectName + '.log';
  var logger = createLogger({
    levels: myCustomLevels.levels,
    format: combine(format.colorize(), timestamp(), myFormat),
    exitOnError: false,
    transports: [new transports.Console({
      level: _config.logger.consoleLevel
    }), new _winstonDailyRotateFile2.default({
      level: _config.logger.fileLevel,
      filename: filename,
      timestamp: function timestamp() {
        return new Date().toLocaleString();
      },
      maxFiles: 10,
      handleExceptions: true
    })]
  });
  return logger;
};

module.exports = exports['default'];
//# sourceMappingURL=logger.js.map