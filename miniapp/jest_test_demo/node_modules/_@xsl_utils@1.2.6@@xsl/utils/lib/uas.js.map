{"version":3,"sources":["../src/uas.js"],"names":["getUserInfoByIds","userIds","fields","url","uas","userIdArrs","R","splitEvery","all","map","request","post","ids","resp","userInfoMap","flatten","prop","reduce","f","v","userId","getUserInfoByMobile","mobile","critical","field","type","value","userInfo","path","temp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEO,IAAMA;AAAA,sFAAmB,iBAAOC,OAAP;AAAA,QAAgBC,MAAhB,uEAAyB,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,eADwB,GACfC,WADe;AAExBC,sBAFwB,GAEXC,gBAAEC,UAAF,CAAa,EAAb,EAAiBN,OAAjB,CAFW;AAAA;AAAA,mBAGX,kBAAQO,GAAR,CAAYH,WAAWI,GAAX,CAAe;AAAA,qBAAOC,kBAAQC,IAAR,CAAaR,GAAb,EAAkB;AACrEF,yBAASW,GAD4D;AAErE;AACAV;AAHqE,eAAlB,CAAP;AAAA,aAAf,CAAZ,CAHW;;AAAA;AAGxBW,gBAHwB;AAQxBC,uBARwB,GAQVR,gBAAES,OAAF,CAAUF,KAAKJ,GAAL,CAASH,gBAAEU,IAAF,CAAO,MAAP,CAAT,CAAV,EAAoCC,MAApC,CAA2C,UAACC,CAAD,EAAIC,CAAJ;AAAA,gDAC1DD,CAD0D,oCAE5DC,EAAEC,MAF0D,EAEjDD,CAFiD;AAAA,aAA3C,EAGhB,EAHgB,CARU;AAAA,6CAYvBL,WAZuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAeA,IAAMO;AAAA,uFAAsB,kBAAOC,MAAP;AAAA,QAAepB,MAAf,uEAAwB,CACzD,SADyD,EAC9C,WAD8C,EACjC,QADiC,EACvB,WADuB,EACV,uBADU,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3BC,eAF2B,GAElBC,WAFkB;AAAA;AAAA,mBAGdM,kBAAQC,IAAR,CAAaR,GAAb,EAAkB;AACnCoB,wBAAU,CACR;AACEC,uBAAO,SADT;AAEEC,sBAAM,MAFR;AAGEC,uBAAOJ;AAHT,eADQ,CADyB;AAQnCpB;AARmC,aAAlB,CAHc;;AAAA;AAG3BW,gBAH2B;AAa3Bc,oBAb2B,GAahBrB,gBAAEsB,IAAF,CAAO,CAAC,MAAD,EAAS,CAAT,CAAP,EAAoBf,IAApB,CAbgB;AAAA,8CAc1Bc,QAd0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAiBA,IAAME,sBAAO,IAAb","file":"uas.js","sourcesContent":["import R from 'ramda'\nimport request from './request'\nimport { uas } from './config'\n\nexport const getUserInfoByIds = async (userIds, fields = []) => {\n  const url = `${uas}/search/user/`\n  const userIdArrs = R.splitEvery(20, userIds)\n  const resp = await Promise.all(userIdArrs.map(ids => request.post(url, {\n    userIds: ids,\n    // fields: ['schools', 'hospitals', 'areaId', 'introduce', 'lastRealnameTimestamp'],\n    fields,\n  })))\n  const userInfoMap = R.flatten(resp.map(R.prop('data'))).reduce((f, v) => ({\n    ...f,\n    [v.userId]: v,\n  }), {})\n  return userInfoMap\n}\n\nexport const getUserInfoByMobile = async (mobile, fields = [\n  'schools', 'hospitals', 'areaId', 'introduce', 'lastRealnameTimestamp']) => {\n  const url = `${uas}/search/user/list`\n  const resp = await request.post(url, {\n    critical: [\n      {\n        field: 'account',\n        type: 'term',\n        value: mobile,\n      },\n    ],\n    fields,\n  })\n  const userInfo = R.path(['data', 0], resp)\n  return userInfo\n}\n\nexport const temp = null\n"]}