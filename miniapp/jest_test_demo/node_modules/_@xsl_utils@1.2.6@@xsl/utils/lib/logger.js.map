{"version":3,"sources":["../src/logger.js"],"names":["createLogger","winston","format","transports","addColors","combine","timestamp","printf","myFormat","Date","info","toLocaleString","level","message","myCustomLevels","levels","error","warn","debug","colors","projectName","Error","filename","process","env","NODE_ENV","logger","colorize","exitOnError","Console","loggerConfig","consoleLevel","RotateFile","fileLevel","maxFiles","handleExceptions"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;IAEQA,Y,GAAgDC,iB,CAAhDD,Y;IAAcE,M,GAAkCD,iB,CAAlCC,M;IAAQC,U,GAA0BF,iB,CAA1BE,U;IAAYC,S,GAAcH,iB,CAAdG,S;IAClCC,O,GAA+BH,M,CAA/BG,O;IAASC,S,GAAsBJ,M,CAAtBI,S;IAAWC,M,GAAWL,M,CAAXK,M;;AAC5B,IAAMC,WAAWD,OAAO;AAAA,SAAW,IAAIE,IAAJ,CAASC,KAAKJ,SAAd,EAAyBK,cAAzB,EAAX,WAA0DD,KAAKE,KAA/D,UAAyEF,KAAKG,OAA9E;AAAA,CAAP,CAAjB;AACA,IAAMC,iBAAiB;AACrBC,UAAQ;AACNC,WAAO,CADD;AAENC,UAAM,CAFA;AAGNP,UAAM,CAHA;AAINQ,WAAO;AAJD,GADa;AAOrBC,UAAQ;AACND,WAAO,MADD;AAENR,UAAM,MAFA;AAGNO,UAAM,QAHA;AAIND,WAAO;AAJD;AAPa,CAAvB;;AAeAZ,UAAUU,eAAeK,MAAzB;;kBAGe,UAACC,WAAD,EAAiB;AAC9B,MAAI,CAACA,WAAL,EAAkB;AAChB,UAAMC,MAAM,6BAAN,CAAN;AACD;AACD,MAAMC,WAAWC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,cACNL,WADM,SACSA,WADT,YACgCA,WADhC,SAAjB;AAEA,MAAMM,SAAS1B,aAAa;AAC1Be,YAAQD,eAAeC,MADG;AAE1Bb,YAAQG,QACNH,OAAOyB,QAAP,EADM,EAENrB,WAFM,EAGNE,QAHM,CAFkB;AAO1BoB,iBAAa,KAPa;AAQ1BzB,gBAAY,CACV,IAAKA,WAAW0B,OAAhB,CAAyB;AACvBjB,aAAOkB,eAAaC;AADG,KAAzB,CADU,EAIV,IAAIC,gCAAJ,CAAe;AACbpB,aAAOkB,eAAaG,SADP;AAEbX,wBAFa;AAGbhB,iBAAW;AAAA,eAAO,IAAIG,IAAJ,GAAWE,cAAX,EAAP;AAAA,OAHE;AAIbuB,gBAAU,EAJG;AAKbC,wBAAkB;AALL,KAAf,CAJU;AARc,GAAb,CAAf;AAqBA,SAAOT,MAAP;AACD,C","file":"logger.js","sourcesContent":["import winston from 'winston'\nimport RotateFile from 'winston-daily-rotate-file'\nimport { logger as loggerConfig } from './config'\n\nconst { createLogger, format, transports, addColors } = winston\nconst { combine, timestamp, printf } = format\nconst myFormat = printf(info => `${new Date(info.timestamp).toLocaleString()} - ${info.level}: ${info.message}`)\nconst myCustomLevels = {\n  levels: {\n    error: 0,\n    warn: 1,\n    info: 2,\n    debug: 3,\n  },\n  colors: {\n    debug: 'blue',\n    info: 'cyan',\n    warn: 'yellow',\n    error: 'red',\n  },\n}\n\naddColors(myCustomLevels.colors)\n\n\nexport default (projectName) => {\n  if (!projectName) {\n    throw Error('logger缺少项目名称，请传入String(项目名)')\n  }\n  const filename = process.env.NODE_ENV === 'production' ?\n    `/logs/${projectName}/${projectName}.log` : `${projectName}.log`\n  const logger = createLogger({\n    levels: myCustomLevels.levels,\n    format: combine(\n      format.colorize(),\n      timestamp(),\n      myFormat,\n    ),\n    exitOnError: false,\n    transports: [\n      new (transports.Console)({\n        level: loggerConfig.consoleLevel,\n      }),\n      new RotateFile({\n        level: loggerConfig.fileLevel,\n        filename,\n        timestamp: () => (new Date().toLocaleString()),\n        maxFiles: 10,\n        handleExceptions: true,\n      }),\n    ],\n  })\n  return logger\n}\n"]}