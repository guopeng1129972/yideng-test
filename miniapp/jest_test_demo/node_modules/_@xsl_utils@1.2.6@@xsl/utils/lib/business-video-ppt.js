'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var getVideoConfig = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(uid) {
    var record;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return bmDB('t_business_ppt').where({ uid: uid });

          case 3:
            record = _context.sent[0];

            if (record) {
              _context.next = 6;
              break;
            }

            throw new Error('\u8868\u91CC\u6CA1\u67E5\u5230\u5BF9\u5E94uid\u7684\u914D\u7F6E\uFF0Cuid = ' + uid);

          case 6:
            return _context.abrupt('return', record);

          case 9:
            _context.prev = 9;
            _context.t0 = _context['catch'](0);

            logger.error('error in get video config, uid: ' + uid + ', ' + _context.t0.stack);
            throw new Error('该项目无录课配置');

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 9]]);
  }));

  return function getVideoConfig(_x) {
    return _ref.apply(this, arguments);
  };
}();

var getPptDetailByUid = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(pptUid) {
    var records, images;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return bmDB('t_business_ppt as tp').leftJoin('t_business_ppt_image as ti', 'tp.uid', 'ti.ppt_uid').select('tp.uid as uid', 'tp.title as title', 'ti.url as url', 'ti.index as index').where('tp.uid', pptUid).andWhere('tp.status', 1);

          case 2:
            records = _context2.sent;

            if (records.length) {
              _context2.next = 6;
              break;
            }

            logger.error('error in get ppt detail, pptUid = ' + pptUid);
            throw new Error('无此ppt');

          case 6:
            images = records.filter(function (v) {
              return v.url;
            }).sort(function (v1, v2) {
              return v1.index - v2.index;
            }).map(function (v) {
              return v.url;
            });
            return _context2.abrupt('return', (0, _extends3.default)({}, records[0], { images: images }));

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getPptDetailByUid(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var getPptsDetailByUids = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(uids) {
    var records, ppts;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(!uids || !uids.length)) {
              _context3.next = 3;
              break;
            }

            logger.error('没有提供露可配置的uids');
            throw new Error('没有提供露可配置的uids');

          case 3:
            _context3.next = 5;
            return bmDB('t_business_ppt as tp').leftJoin('t_business_ppt_image as ti', 'tp.uid', 'ti.ppt_uid').select('tp.uid as uid', 'tp.title as title', 'ti.url as url', 'ti.index as index').whereIn('tp.uid', uids).andWhere('tp.status', 1);

          case 5:
            records = _context3.sent;
            ppts = _ramda2.default.uniqWith(function (v1, v2) {
              return v1.uid === v2.uid;
            })(records).map(function (ppt) {
              return {
                uid: ppt.uid,
                title: ppt.title,
                images: _ramda2.default.filter(function (record) {
                  return record.uid === ppt.uid && record.url;
                }, records).sort(function (v1, v2) {
                  return v1.index - v2.index;
                }).map(function (v) {
                  return v.url;
                })
              };
            });
            return _context3.abrupt('return', ppts);

          case 8:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getPptsDetailByUids(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _knex = require('knex');

var _knex2 = _interopRequireDefault(_knex);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bmDB = (0, _knex2.default)(_config2.default.bmDb);
var logger = global.logger || console.log;

exports.default = {
  getVideoConfig: getVideoConfig,
  getPptDetailByUid: getPptDetailByUid,
  getPptsDetailByUids: getPptsDetailByUids
};
module.exports = exports['default'];
//# sourceMappingURL=business-video-ppt.js.map