'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendMessage = exports.createPatientEducationWithDoctorId = exports.getAllPatientByDoctorId = exports.getPatientListByDoctorId = exports.getV4PatientInfoByPatientId = exports.getPatienInfoByPatientIds = exports.getPatienInfoByPatientId = exports.sendLinkMessageToDoctor = exports.sendLinkMessageToPatient = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// placeholder 暂时不用, 应该是一个icon地址
var sendLinkMessageToPatient = exports.sendLinkMessageToPatient = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref2) {
    var patientId = _ref2.patientId,
        doctorId = _ref2.doctorId,
        title = _ref2.title,
        _ref2$placeholder = _ref2.placeholder,
        placeholder = _ref2$placeholder === undefined ? 'xxx' : _ref2$placeholder,
        url = _ref2.url;
    var requestUrl, resp;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!patientId || !doctorId)) {
              _context.next = 2;
              break;
            }

            throw new Error('缺少医生id或者患者id');

          case 2:
            requestUrl = _config.followup.url + '/content/inner/message';
            _context.next = 5;
            return _request2.default.post(requestUrl, {
              patientId: patientId,
              messageUid: (0, _v2.default)(),
              doctorId: doctorId,
              content: {
                title: title,
                placeholder: placeholder,
                url: url,
                formType: 'scale'
              }
            });

          case 5:
            resp = _context.sent;
            return _context.abrupt('return', _ramda2.default.path(['id'])(resp));

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function sendLinkMessageToPatient(_x) {
    return _ref.apply(this, arguments);
  };
}();

var sendLinkMessageToDoctor = exports.sendLinkMessageToDoctor = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref4) {
    var patientId = _ref4.patientId,
        title = _ref4.title,
        _ref4$placeholder = _ref4.placeholder,
        placeholder = _ref4$placeholder === undefined ? 'xxx' : _ref4$placeholder,
        url = _ref4.url;
    var requestUrl, resp;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (patientId) {
              _context2.next = 2;
              break;
            }

            throw new Error('缺少患者id');

          case 2:
            if (url) {
              _context2.next = 4;
              break;
            }

            throw new Error('缺少链接url');

          case 4:
            requestUrl = _config.followup.url + '/inner/message/doctor';
            _context2.next = 7;
            return _request2.default.post(requestUrl, {
              patientId: patientId,
              messageUid: (0, _v2.default)(),
              content: {
                title: title,
                placeholder: placeholder,
                url: url,
                formType: 'scale'
              },
              msgType: 'native-form'
            });

          case 7:
            resp = _context2.sent;
            return _context2.abrupt('return', _ramda2.default.path(['id'])(resp));

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function sendLinkMessageToDoctor(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

// 新版患者信息 根据患者id获取患者信息
var getPatienInfoByPatientId = exports.getPatienInfoByPatientId = function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(_ref6) {
    var patientId = _ref6.patientId;
    var requestUrl, resp;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (patientId) {
              _context3.next = 2;
              break;
            }

            throw new Error('缺少患者id');

          case 2:
            requestUrl = _config.followup.url + '/inner/patient/' + patientId;
            _context3.next = 5;
            return _request2.default.get(requestUrl);

          case 5:
            resp = _context3.sent;
            return _context3.abrupt('return', resp);

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function getPatienInfoByPatientId(_x3) {
    return _ref5.apply(this, arguments);
  };
}();

// 根据一组患者id获取患者信息。注意非一一对应，需手工对应！！！！
var getPatienInfoByPatientIds = exports.getPatienInfoByPatientIds = function () {
  var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(_ref8) {
    var patientIds = _ref8.patientIds;
    var resp;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _request2.default.get(_config.followup.url + '/inner/patient/ids/' + patientIds);

          case 2:
            resp = _context4.sent;
            return _context4.abrupt('return', resp);

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function getPatienInfoByPatientIds(_x4) {
    return _ref7.apply(this, arguments);
  };
}();

// 经典版患者信息
var getV4PatientInfoByPatientId = exports.getV4PatientInfoByPatientId = function () {
  var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(_ref10) {
    var patientId = _ref10.patientId;
    var requestUrl, resp;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (patientId) {
              _context5.next = 2;
              break;
            }

            throw new Error('缺少患者id');

          case 2:
            requestUrl = _config.followup.casefolder + '/patient/detail/' + patientId;
            _context5.next = 5;
            return _request2.default.get(requestUrl);

          case 5:
            resp = _context5.sent;
            return _context5.abrupt('return', resp);

          case 7:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function getV4PatientInfoByPatientId(_x5) {
    return _ref9.apply(this, arguments);
  };
}();

// 获取医生下的有效患者列表
var getPatientListByDoctorId = exports.getPatientListByDoctorId = function getPatientListByDoctorId(doctorId) {
  if (!doctorId) throw new Error('缺少doctorId');
  var requestUrl = _config.followup.casefolder + '/patient/list/' + doctorId;
  return _request2.default.get(requestUrl);
};

// 获取医生下的所有患者列表
var getAllPatientByDoctorId = exports.getAllPatientByDoctorId = function getAllPatientByDoctorId(doctorId) {
  if (!doctorId) throw new Error('缺少doctorId');
  var requestUrl = _config.followup.casefolder + '/patient/list/' + doctorId + '?type=all';
  return _request2.default.get(requestUrl);
};

// 为医生创建患教
var createPatientEducationWithDoctorId = exports.createPatientEducationWithDoctorId = function createPatientEducationWithDoctorId(_ref11) {
  var doctorId = _ref11.doctorId,
      resourceName = _ref11.resourceName,
      link = _ref11.link,
      diseaseName = _ref11.diseaseName;

  if (!doctorId || !resourceName || !link || !diseaseName) throw new Error('参数错误');
  var requestUrl = _config.followup.casefolder + '/doctor/init/resource/' + doctorId;
  return _request2.default.post(requestUrl, {
    resourceName: resourceName, link: link, diseaseName: diseaseName
  });
};

// 发送随访消息
var sendMessage = exports.sendMessage = function sendMessage(_ref12) {
  var content = _ref12.content,
      openId = _ref12.openId;

  if (!content || !openId) throw new Error('参数错误');
  return _request2.default.post(_config.followup.message, {
    content: content,
    openid: openId,
    messageUid: Math.floor(Math.random() * 1000000000000000000) // 生成18位随机数字
  });
};
//# sourceMappingURL=followup.js.map