'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _amqplib = require('amqplib');

var _amqplib2 = _interopRequireDefault(_amqplib);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref2) {
    var vhost = _ref2.vhost,
        exchange = _ref2.exchange,
        exchangeType = _ref2.exchangeType,
        routingKey = _ref2.routingKey,
        queue = _ref2.queue,
        consume = _ref2.consume;

    var amqpDomain, name, _queue$options, assert, bind, consumeHandler, options, url, connection, channel;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            amqpDomain = _config2.default.amqpDomain;
            name = queue.name, _queue$options = queue.options, assert = _queue$options.assert, bind = _queue$options.bind;
            consumeHandler = consume.consumeHandler, options = consume.options;
            url = amqpDomain + '/' + vhost;
            _context2.prev = 4;
            _context2.next = 7;
            return _amqplib2.default.connect(url);

          case 7:
            connection = _context2.sent;
            _context2.next = 10;
            return connection.createChannel();

          case 10:
            channel = _context2.sent;
            _context2.next = 13;
            return channel.assertExchange(exchange, exchangeType, { durable: true });

          case 13:
            _context2.next = 15;
            return channel.assertQueue(name, assert);

          case 15:
            _context2.next = 17;
            return channel.bindQueue(name, exchange, routingKey, bind);

          case 17:
            _context2.next = 19;
            return channel.consume(name, function () {
              var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(msg) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        consumeHandler.apply(consume, [msg, { channel: channel, exchange: exchange, queue: queue }]);

                      case 1:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, undefined);
              }));

              return function (_x2) {
                return _ref3.apply(this, arguments);
              };
            }(), options);

          case 19:
            _context2.next = 24;
            break;

          case 21:
            _context2.prev = 21;
            _context2.t0 = _context2['catch'](4);

            console.error('consume \u6D88\u606F\u9519\u8BEF, routing key is ' + routingKey, _context2.t0);

          case 24:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[4, 21]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = exports['default'];
//# sourceMappingURL=consumeMq.js.map