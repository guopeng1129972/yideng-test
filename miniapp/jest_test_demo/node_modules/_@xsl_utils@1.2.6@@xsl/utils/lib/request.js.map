{"version":3,"sources":["../src/request.js"],"names":["url","method","params","headers","ret","query","body","qs","stringify","arrayFormat","send","set","timeout","res","text","JSON","parse","Error","message","data","obj","requestService","fetch","get","del","post","put"],"mappings":";;;;;;;;;;;;;;;sFAIA,iBAA8BA,GAA9B;AAAA,QAAmCC,MAAnC,uEAA4C,KAA5C;AAAA,QAAmDC,MAAnD,uEAA4D,EAA5D;AAAA,QAAgEC,OAAhE,uEAA0E,EAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,eADN,GACY,EADZ;AAEMC,iBAFN,GAEc,EAFd;AAGMC,gBAHN,GAGa,EAHb;;AAIE,gBAAIL,WAAW,KAAX,IAAoBA,WAAW,QAAnC,EAA6C;AAC3CI,sBAAQE,aAAGC,SAAH,CAAaN,MAAb,EAAqB,EAAEO,aAAa,QAAf,EAArB,CAAR;AACD,aAFD,MAEO;AACLH,qBAAOJ,MAAP;AACD;AARH;AAAA;AAAA,mBAUsB,0BAAQD,MAAR,EAAgBD,GAAhB,EACfK,KADe,CACTA,KADS,EAEfK,IAFe,CAEVJ,IAFU,EAGfK,GAHe,CAGX,qBAAMR,OAAN,CAHW;AAIhB;AAJgB,aAKfS,OALe,CAKP,IALO,CAVtB;;AAAA;AAUUC,eAVV;;AAgBIT,kBAAMS,IAAIC,IAAJ,GAAWC,KAAKC,KAAL,CAAWH,IAAIC,IAAf,CAAX,GAAkCD,IAAIC,IAA5C;AAhBJ;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAkBU,IAAIG,KAAJ,CAAU,YAAIC,OAAd,CAlBV;;AAAA;AAAA,6CAoBSd,MAAOA,IAAIe,IAAJ,IAAYf,IAAIgB,GAAhB,IAAuBhB,GAA9B,GAAqC,IApB9C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeiB,c;;;;;AAJf;;;;AACA;;;;AACA;;;;;;AAyBA,SAASC,KAAT,CAAetB,GAAf,EAA+C;AAAA,MAA3BE,MAA2B,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC7C,SAAOkB,eAAerB,GAAf,EAAoB,KAApB,EAA2BE,MAA3B,EAAmCC,OAAnC,CAAP;AACD;;AAEDmB,MAAMC,GAAN,GAAY,UAACvB,GAAD;AAAA,MAAME,MAAN,uEAAe,EAAf;AAAA,MAAmBC,OAAnB,uEAA6B,EAA7B;AAAA,SAAoCmB,MAAMtB,GAAN,EAAWE,MAAX,EAAmBC,OAAnB,CAApC;AAAA,CAAZ;AACAmB,MAAME,GAAN,GAAY,UAACxB,GAAD;AAAA,MAAME,MAAN,uEAAe,EAAf;AAAA,MAAmBC,OAAnB,uEAA6B,EAA7B;AAAA,SAAoCkB,eAAerB,GAAf,EAAoB,QAApB,EAA8BE,MAA9B,EAAsCC,OAAtC,CAApC;AAAA,CAAZ;AACAmB,MAAMG,IAAN,GAAa,UAACzB,GAAD;AAAA,MAAME,MAAN,uEAAe,EAAf;AAAA,MAAmBC,OAAnB,uEAA6B,EAA7B;AAAA,SAAoCkB,eAAerB,GAAf,EAAoB,MAApB,EAA4BE,MAA5B,EAAoCC,OAApC,CAApC;AAAA,CAAb;AACAmB,MAAMI,GAAN,GAAY,UAAC1B,GAAD;AAAA,MAAME,MAAN,uEAAe,EAAf;AAAA,MAAmBC,OAAnB,uEAA6B,EAA7B;AAAA,SAAoCkB,eAAerB,GAAf,EAAoB,KAApB,EAA2BE,MAA3B,EAAmCC,OAAnC,CAApC;AAAA,CAAZ;;kBAEemB,K","file":"request.js","sourcesContent":["import request from 'superagent'\nimport qs from 'qs'\nimport groom from 'groom'\n\nasync function requestService(url, method = 'GET', params = {}, headers = {}) {\n  let ret = {}\n  let query = {}\n  let body = {}\n  if (method === 'GET' || method === 'DELETE') {\n    query = qs.stringify(params, { arrayFormat: 'repeat' })\n  } else {\n    body = params\n  }\n  try {\n    const res = await request(method, url)\n      .query(query)\n      .send(body)\n      .set(groom(headers))\n      // 3s 内不返回的接口直接抛异常\n      .timeout(3000)\n    ret = res.text ? JSON.parse(res.text) : res.text\n  } catch (err) {\n    throw new Error(err.message)\n  }\n  return ret ? (ret.data || ret.obj || ret) : null\n}\n\nfunction fetch(url, params = {}, headers = {}) {\n  return requestService(url, 'GET', params, headers)\n}\n\nfetch.get = (url, params = {}, headers = {}) => fetch(url, params, headers)\nfetch.del = (url, params = {}, headers = {}) => requestService(url, 'DELETE', params, headers)\nfetch.post = (url, params = {}, headers = {}) => requestService(url, 'POST', params, headers)\nfetch.put = (url, params = {}, headers = {}) => requestService(url, 'PUT', params, headers)\n\nexport default fetch\n"]}