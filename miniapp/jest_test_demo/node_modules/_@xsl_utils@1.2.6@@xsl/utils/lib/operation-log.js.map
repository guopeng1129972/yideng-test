{"version":3,"sources":["../src/operation-log.js"],"names":["bmDb","config","forKoa","ctx","logger","console","request","req","method","url","href","R","find","v","toUpperCase","cookies","cookie","parse","path","token","operatorId","operatorName","type","toLowerCase","body","on","chunk","insert","user_id","user_name","JSON","error","message","forExpress"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAO,oBAAKC,iBAAOD,IAAZ,CAAb;;AAEO,IAAME;AAAA,sFAAS,kBAAOC,GAAP;AAAA,QAAYC,MAAZ,uEAAqBC,OAArB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGVC,mBAHU,GAGOH,GAHP,CAGVG,OAHU,EAGDC,GAHC,GAGOJ,GAHP,CAGDI,GAHC;AAIVC,kBAJU,GAIYF,OAJZ,CAIVE,MAJU,EAIIC,GAJJ,GAIYH,OAJZ,CAIFI,IAJE;;AAAA,iBAKdC,gBAAEC,IAAF,CAAO;AAAA,qBAAKC,MAAML,OAAOM,WAAP,EAAX;AAAA,aAAP,EAAwC,CAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,OAAjC,CAAxC,CALc;AAAA;AAAA;AAAA;;AAMVC,mBANU,GAMAC,iBAAOC,KAAP,CAAaN,gBAAEO,IAAF,CAAO,CAAC,SAAD,EAAY,QAAZ,CAAP,EAA8BZ,OAA9B,CAAb,CANA;AAOVa,iBAPU,GAOFJ,QAAQ,cAAR,CAPE;AAAA,+BAQqB,4BAAgBI,KAAhB,CARrB,EAQRC,UARQ,oBAQRA,UARQ,EAQIC,YARJ,oBAQIA,YARJ;AAShB;;AATgB,kBAUZ,CAACf,QAAQgB,IAAR,IAAgB,EAAjB,EAAqBC,WAArB,OAAuC,kBAV3B;AAAA;AAAA;AAAA;;AAWVC,gBAXU,GAWH,EAXG;;AAYdjB,gBAAIkB,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACxBF,sBAAQE,KAAR,CADwB,CACV;AACf,aAFD;AAGAnB,gBAAIkB,EAAJ,CAAO,KAAP,2EAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACNzB,KAAK,eAAL,EAAsB2B,MAAtB,CAA6B;AACjCC,iCAASR,UADwB;AAEjCS,mCAAWR,YAFsB;AAGjCZ,gCAHiC;AAIjCD,sCAJiC;AAKjCgB,8BAAM,yBAAeM,KAAKb,KAAL,CAAWO,QAAQ,IAAnB,CAAf;AAL2B,uBAA7B,CADM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAd;AAfc;AAAA;;AAAA;AAAA;AAAA,mBAyBRxB,KAAK,eAAL,EAAsB2B,MAAtB,CAA6B;AACjCC,uBAASR,UADwB;AAEjCS,yBAAWR,YAFsB;AAGjCZ,sBAHiC;AAIjCD,4BAJiC;AAKjCgB,oBAAM,yBAAe,EAAf;AAL2B,aAA7B,CAzBQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmClBpB,mBAAO2B,KAAP,qCAA+C,aAAIC,OAAnD;;AAnCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAuCA,IAAMC,kCAAa,IAAnB","file":"operation-log.js","sourcesContent":["import R from 'ramda'\nimport cookie from 'cookie'\nimport knex from 'knex'\nimport config from './config'\nimport getLdapUserInfo from './ldap-user-info'\n\nconst bmDb = knex(config.bmDb)\n\nexport const forKoa = async (ctx, logger = console) => {\n  // 自己包住错误, 不要抛出去, 不要影响请求本身\n  try {\n    const { request, req } = ctx\n    const { method, href: url } = request\n    if (R.find(v => v === method.toUpperCase())(['POST', 'DELETE', 'PUT', 'DEL', 'PATCH'])) {\n      const cookies = cookie.parse(R.path(['headers', 'cookie'], request))\n      const token = cookies['L-User-Token']\n      const { operatorId, operatorName } = getLdapUserInfo(token)\n      // 对于body, 需要解析 注意这里只解析 application/json的\n      if ((request.type || '').toLowerCase() === 'application/json') {\n        let body = ''\n        req.on('data', (chunk) => {\n          body += chunk // 一定要使用+=，如果body=chunk，因为请求favicon.ico，body会等于{}\n        })\n        req.on('end', async () => {\n          await bmDb('t_request_log').insert({\n            user_id: operatorId,\n            user_name: operatorName,\n            url,\n            method,\n            body: JSON.stringify(JSON.parse(body || '{}')),\n          })\n        })\n      } else {\n        await bmDb('t_request_log').insert({\n          user_id: operatorId,\n          user_name: operatorName,\n          url,\n          method,\n          body: JSON.stringify({}),\n        })\n      }\n    }\n  } catch (err) {\n    logger.error(`error when save operation log, ${err.message}`)\n  }\n}\n\nexport const forExpress = null\n"]}