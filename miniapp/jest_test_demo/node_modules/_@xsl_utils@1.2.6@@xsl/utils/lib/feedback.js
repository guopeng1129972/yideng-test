'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendFeedbackTextMessage = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultAppNames = ['medchart', 'medclips_plus'];

/**
 * 发送纯文本小秘书消息，
 * @param {String} doctorId 医生id
 * @param {String} message 文本消息内容
 * @param {String|Array<string>} appName 发送App名称，默认全发（经典版，新版病历夹）
 */
// eslint-disable-next-line import/prefer-default-export
var sendFeedbackTextMessage = exports.sendFeedbackTextMessage = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref2) {
    var doctorId = _ref2.doctorId,
        message = _ref2.message,
        _ref2$appName = _ref2.appName,
        appName = _ref2$appName === undefined ? defaultAppNames : _ref2$appName;
    var appNames, results;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            appNames = Array.isArray(appName) ? appName : [appName];
            _context.next = 3;
            return _promise2.default.all(appNames.map(function (_appName) {
              return _request2.default.post(_config.drDomain + '/api/feedback/BusinessMessage', {
                adminId: _config.feedBack.adminId,
                message: message,
                messageType: 'TEXT',
                type: 2,
                toId: doctorId,
                appName: _appName,
                createdAt: new Date()
              });
            }));

          case 3:
            results = _context.sent;


            console.info('[Send Feedback Text Message]:\n{ ' + doctorId + ', ' + message + ' }, feedback response: , ' + (0, _stringify2.default)(results));
            return _context.abrupt('return', results);

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function sendFeedbackTextMessage(_x) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=feedback.js.map