{"version":3,"sources":["../../src/wechat/uploadImageToQiniu.js"],"names":["uptoken","key","stream","uploadConfig","qiniu","conf","Config","zone","config","feedback","formUploader","form_up","FormUploader","putExtra","PutExtra","Promise","promisify","putStream","bind","qiniuKey","domain","uploadFile","req","res","sessionKey","method","url","qiniuDomain","params","space","bucket","uploadToken","data","obj","token","wechatAccessToken","access_token","media_id","query","mediaId","responseType","resp","imgStream","bizUid","imgPath","json","status","errorMsg","message"],"mappings":";;;;;;;;;;;;;;AAUA;AACA;;sFACA,iBAA0BA,OAA1B,EAAmCC,GAAnC,EAAwCC,MAAxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQC,wBADR,GACuB,IAAIC,gBAAMC,IAAN,CAAWC,MAAf,EADvB;;AAEEH,yBAAaI,IAAb,GAAoBH,gBAAMG,IAAN,CAAWC,iBAAOJ,KAAP,CAAaK,QAAb,CAAsBF,IAAjC,CAApB;AACMG,wBAHR,GAGuB,IAAIN,gBAAMO,OAAN,CAAcC,YAAlB,CAA+BT,YAA/B,CAHvB;AAIQU,oBAJR,GAImB,IAAIT,gBAAMO,OAAN,CAAcG,QAAlB,EAJnB;AAAA;AAAA,mBAKkCC,mBAAQC,SAAR,CAC9BN,aAAaO,SADiB,EAE9BC,IAF8B,CAEzBR,YAFyB,EAEXV,OAFW,EAEFC,GAFE,EAEGC,MAFH,EAEWW,QAFX,CALlC;;AAAA;AAAA;AAKeM,oBALf,SAKUlB,GALV;AAAA,6CAQYO,iBAAOJ,KAAP,CAAaK,QAAb,CAAsBW,MARlC,SAQ4CD,QAR5C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeE,U;;;;;AAWf;;;;;;AAvBA;AACA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;uFAqBe,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEe,8BAFf;;AAAA;AAELC,sBAFK,kBAEgC,cAFhC;AAAA;AAAA,mBAG6C,qBAAQ;AAC9DC,sBAAQ,KADsD;AAE9DC,mBAAQlB,iBAAOmB,WAAf,iBAF8D;AAG9DC,sBAAQ;AACNJ,sCADM;AAENK,uBAAOrB,iBAAOJ,KAAP,CAAaK,QAAb,CAAsBqB;AAFvB;AAHsD,aAAR,CAH7C;;AAAA;AAAA;AAGmBC,uBAHnB,SAGHC,IAHG,CAGKC,GAHL,CAGYC,KAHZ;AAAA;AAAA,mBAYyB,+BAZzB;;AAAA;AAAA;AAYHC,6BAZG,SAYHA,iBAZG;AAaLT,eAbK,GAaC,iDAbD;AAcX;;AAdW;AAAA,mBAeQ,qBAAQ;AACzBD,sBAAQ,KADiB;AAEzBC,sBAFyB;AAGzBE,sBAAQ;AACNQ,8BAAcD,iBADR;AAENE,0BAAUf,IAAIgB,KAAJ,CAAUC;AAFd,eAHiB;AAOzBC,4BAAc;AAPW,aAAR,CAfR;;AAAA;AAeLC,gBAfK;AAwBLC,qBAxBK,GAwBOD,KAAKT,IAxBZ;AAyBX;;AAzBW;AAAA,mBA0BWX,WAAWU,WAAX,EAA2BT,IAAIgB,KAAJ,CAAUK,MAArC,SAA+C,kBAA/C,EAAyDD,SAAzD,CA1BX;;AAAA;AA0BLE,mBA1BK;;AA2BXrB,gBAAIsB,IAAJ,CAAS;AACPD;AADO,aAAT;AA3BW;AAAA;;AAAA;AAAA;AAAA;;AA+BXrB,gBAAIuB,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACnBE,wBAAU,aAAEC;AADO,aAArB;;AA/BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"uploadImageToQiniu.js","sourcesContent":["// 将微信服务器上的图片下载下来, 然后上传到qiniu\n// 从微信服务器下载图片, 需要accesstoken\nimport request from 'axios'\nimport Promise from 'bluebird'\nimport qiniu from 'qiniu'\nimport uuid from 'uuid/v4'\nimport getWechatToken from './getWechatToken'\nimport sessionHeader from './sessionHeader'\nimport config from '../config'\n\n// 构造上传函数\n// 这里的key应该是userId/bizId/文件名\nasync function uploadFile(uptoken, key, stream) {\n  const uploadConfig = new qiniu.conf.Config()\n  uploadConfig.zone = qiniu.zone[config.qiniu.feedback.zone]\n  const formUploader = new qiniu.form_up.FormUploader(uploadConfig)\n  const putExtra = new qiniu.form_up.PutExtra()\n  const { key: qiniuKey } = await Promise.promisify(\n    formUploader.putStream\n  ).bind(formUploader)(uptoken, key, stream, putExtra)\n  return `${config.qiniu.feedback.domain}/${qiniuKey}`\n}\n\n/**\n * req.query -> { mediaId, bizUid }\n * @param req\n * @param res\n * @returns {Promise.<void>}\n */\nexport default async (req, res) => {\n  try { // 获取qiniu uploadtoken, 这里由于是没有用户登录一说, 直接使用未登录sessionKey以及feedback bucket\n    const sessionKey = (await sessionHeader())['X-User-Token']\n    const { data: { obj: { token: uploadToken } } } = await request({\n      method: 'get',\n      url: `${config.qiniuDomain}/uploadToken`,\n      params: {\n        sessionKey,\n        space: config.qiniu.feedback.bucket,\n      },\n    })\n    // 获取微信服务器的图片\n    const { wechatAccessToken } = await getWechatToken()\n    const url = 'http://file.api.weixin.qq.com/cgi-bin/media/get'\n    // 从微信服务器获取图片\n    const resp = await request({\n      method: 'get',\n      url,\n      params: {\n        access_token: wechatAccessToken,\n        media_id: req.query.mediaId,\n      },\n      responseType: 'stream',\n    })\n    const imgStream = resp.data\n    // 为了保证图片名称唯一, 用一个uuid作为key\n    const imgPath = await uploadFile(uploadToken, `${req.query.bizUid}/${uuid()}`, imgStream)\n    res.json({\n      imgPath,\n    })\n  } catch (e) {\n    res.status(500).json({\n      errorMsg: e.message,\n    })\n  }\n}\n"]}