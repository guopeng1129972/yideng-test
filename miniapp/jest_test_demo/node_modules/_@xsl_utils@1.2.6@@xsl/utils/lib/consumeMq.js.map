{"version":3,"sources":["../src/consumeMq.js"],"names":["vhost","exchange","exchangeType","routingKey","queue","consume","amqpDomain","config","name","options","assert","bind","consumeHandler","url","amqp","connect","connection","createChannel","channel","assertExchange","durable","assertQueue","bindQueue","msg","apply","console","error"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;sFAEe;AAAA,QAASA,KAAT,SAASA,KAAT;AAAA,QAAgBC,QAAhB,SAAgBA,QAAhB;AAAA,QAA0BC,YAA1B,SAA0BA,YAA1B;AAAA,QAAwCC,UAAxC,SAAwCA,UAAxC;AAAA,QAAoDC,KAApD,SAAoDA,KAApD;AAAA,QAA2DC,OAA3D,SAA2DA,OAA3D;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,sBADK,GACUC,gBADV,CACLD,UADK;AAGXE,gBAHW,GAKTJ,KALS,CAGXI,IAHW,mBAKTJ,KALS,CAIXK,OAJW,EAIAC,MAJA,kBAIAA,MAJA,EAIQC,IAJR,kBAIQA,IAJR;AAMLC,0BANK,GAMuBP,OANvB,CAMLO,cANK,EAMWH,OANX,GAMuBJ,OANvB,CAMWI,OANX;AAOPI,eAPO,GAOEP,UAPF,SAOgBN,KAPhB;AAAA;AAAA;AAAA,mBAScc,kBAAKC,OAAL,CAAaF,GAAb,CATd;;AAAA;AASLG,sBATK;AAAA;AAAA,mBAUWA,WAAWC,aAAX,EAVX;;AAAA;AAULC,mBAVK;AAAA;AAAA,mBAWLA,QAAQC,cAAR,CAAuBlB,QAAvB,EAAiCC,YAAjC,EAA+C,EAAEkB,SAAS,IAAX,EAA/C,CAXK;;AAAA;AAAA;AAAA,mBAYLF,QAAQG,WAAR,CAAoBb,IAApB,EAA0BE,MAA1B,CAZK;;AAAA;AAAA;AAAA,mBAaLQ,QAAQI,SAAR,CAAkBd,IAAlB,EAAwBP,QAAxB,EAAkCE,UAAlC,EAA8CQ,IAA9C,CAbK;;AAAA;AAAA;AAAA,mBAcLO,QAAQb,OAAR,CACJG,IADI;AAAA,mGAEJ,iBAAMe,GAAN;AAAA;AAAA;AAAA;AAAA;AACEX,uCAAeY,KAAf,CAAqBnB,OAArB,EAA8B,CAACkB,GAAD,EAAM,EAAEL,gBAAF,EAAWjB,kBAAX,EAAqBG,YAArB,EAAN,CAA9B;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFI;;AAAA;AAAA;AAAA;AAAA,iBAKJK,OALI,CAdK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAsBXgB,oBAAQC,KAAR,uDAA8CvB,UAA9C;;AAtBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"consumeMq.js","sourcesContent":["import amqp from 'amqplib'\nimport config from './config'\n\nexport default async ({ vhost, exchange, exchangeType, routingKey, queue, consume }) => {\n  const { amqpDomain } = config\n  const {\n    name,\n    options: { assert, bind },\n  } = queue\n  const { consumeHandler, options } = consume\n  const url = `${amqpDomain}/${vhost}`\n  try {\n    const connection = await amqp.connect(url)\n    const channel = await connection.createChannel()\n    await channel.assertExchange(exchange, exchangeType, { durable: true })\n    await channel.assertQueue(name, assert)\n    await channel.bindQueue(name, exchange, routingKey, bind)\n    await channel.consume(\n      name,\n      async msg => {\n        consumeHandler.apply(consume, [msg, { channel, exchange, queue }])\n      },\n      options\n    )\n  } catch (e) {\n    console.error(`consume 消息错误, routing key is ${routingKey}`, e)\n  }\n}\n"]}