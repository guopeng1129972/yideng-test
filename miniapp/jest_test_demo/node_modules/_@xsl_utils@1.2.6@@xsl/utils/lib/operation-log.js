'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forExpress = exports.forKoa = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _cookie = require('cookie');

var _cookie2 = _interopRequireDefault(_cookie);

var _knex = require('knex');

var _knex2 = _interopRequireDefault(_knex);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _ldapUserInfo = require('./ldap-user-info');

var _ldapUserInfo2 = _interopRequireDefault(_ldapUserInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bmDb = (0, _knex2.default)(_config2.default.bmDb);

var forKoa = exports.forKoa = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(ctx) {
    var logger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : console;

    var request, req, method, url, cookies, token, _getLdapUserInfo, operatorId, operatorName, body;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            request = ctx.request, req = ctx.req;
            method = request.method, url = request.href;

            if (!_ramda2.default.find(function (v) {
              return v === method.toUpperCase();
            })(['POST', 'DELETE', 'PUT', 'DEL', 'PATCH'])) {
              _context2.next = 15;
              break;
            }

            cookies = _cookie2.default.parse(_ramda2.default.path(['headers', 'cookie'], request));
            token = cookies['L-User-Token'];
            _getLdapUserInfo = (0, _ldapUserInfo2.default)(token), operatorId = _getLdapUserInfo.operatorId, operatorName = _getLdapUserInfo.operatorName;
            // 对于body, 需要解析 注意这里只解析 application/json的

            if (!((request.type || '').toLowerCase() === 'application/json')) {
              _context2.next = 13;
              break;
            }

            body = '';

            req.on('data', function (chunk) {
              body += chunk; // 一定要使用+=，如果body=chunk，因为请求favicon.ico，body会等于{}
            });
            req.on('end', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return bmDb('t_request_log').insert({
                        user_id: operatorId,
                        user_name: operatorName,
                        url: url,
                        method: method,
                        body: (0, _stringify2.default)(JSON.parse(body || '{}'))
                      });

                    case 2:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, undefined);
            })));
            _context2.next = 15;
            break;

          case 13:
            _context2.next = 15;
            return bmDb('t_request_log').insert({
              user_id: operatorId,
              user_name: operatorName,
              url: url,
              method: method,
              body: (0, _stringify2.default)({})
            });

          case 15:
            _context2.next = 20;
            break;

          case 17:
            _context2.prev = 17;
            _context2.t0 = _context2['catch'](0);

            logger.error('error when save operation log, ' + _context2.t0.message);

          case 20:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 17]]);
  }));

  return function forKoa(_x) {
    return _ref.apply(this, arguments);
  };
}();

var forExpress = exports.forExpress = null;
//# sourceMappingURL=operation-log.js.map