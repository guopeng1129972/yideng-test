{"version":3,"sources":["../src/signature.js"],"names":["token","reward","secret","DR","BUSINESS","BM","getExtension","req","source","addressIP","headers","connection","remoteAddress","extension","session","currentUser","operatorName","username","operatorId","id","cookies","cookie","parse","R","path","lUsertoken","operatorNameEncode","admin","ctx","logger","console","timestamp","Date","now","md5","crypto","createHash","signature","update","digest","find","v","method","toUpperCase","addParams","error"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;IAEQA,K,GAAkBC,c,CAAlBD,K;IAAOE,M,GAAWD,c,CAAXC,M;;;AAEf,IAAMC,KAAK,IAAX;AACA,IAAMC,WAAW,UAAjB;AACA,IAAMC,KAAK,IAAX;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,MAA3B,EAAmC;AACjC,MAAMC,YAAYF,IAAIG,OAAJ,CAAY,iBAAZ,KAAkCH,IAAII,UAAJ,CAAeC,aAAnE;AACA,MAAIC,kBAAJ;AACA,MAAIL,WAAWJ,QAAf,EAAyB;AAAA,gCAC6CG,IAAIO,OADjD,CACfC,WADe;AAAA,QACUC,YADV,yBACAC,QADA;AAAA,QAC4BC,UAD5B,yBACwBC,EADxB;;AAEvBN,gBAAeK,UAAf,SAA6BF,YAA7B,SAA6CP,SAA7C,SAA0DD,MAA1D;AACA,WAAOK,SAAP;AACD,GAJD,MAIO,IAAIL,WAAWH,EAAf,EAAmB;AACxB,QAAMe,UAAUC,iBAAOC,KAAP,CAAaC,gBAAEC,IAAF,CAAO,CAAC,SAAD,EAAY,QAAZ,CAAP,EAA8BjB,GAA9B,CAAb,CAAhB;AACA,QAAMkB,aAAaL,QAAQ,cAAR,CAAnB;;AAFwB,2BAGmB,4BAAgBK,UAAhB,CAHnB;AAAA,QAGhBP,WAHgB,oBAGhBA,UAHgB;AAAA,QAGJQ,kBAHI,oBAGJA,kBAHI;;AAIxBb,gBAAeK,WAAf,SAA6BQ,kBAA7B,SAAmDjB,SAAnD,SAAgED,MAAhE;AACA,WAAOK,SAAP;AACD,GANM,MAMA,IAAIL,WAAWL,EAAf,EAAmB;AAAA,6BACsCI,IAAIO,OAD1C,CAChBa,KADgB;AAAA,QACGX,aADH,sBACPC,QADO;AAAA,QACqBC,YADrB,sBACiBC,EADjB;;AAExBN,gBAAeK,YAAf,SAA6BF,aAA7B,SAA6CP,SAA7C,SAA0DD,MAA1D;AACA,WAAOK,SAAP;AACD;AACD,SAAOA,SAAP;AACD;;;sFAEc,iBAAOe,GAAP,EAAYpB,MAAZ;AAAA,QAAoBqB,MAApB,uEAA6BC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEX;AACMvB,eAHK,GAGGqB,GAHH,CAGLrB,GAHK;;AAIX,gBAAI,CAACA,GAAL,EAAUA,MAAMqB,GAAN;AACV;AACMG,qBANK,GAMOC,KAAKC,GAAL,EANP;AAOLC,eAPK,GAOCC,iBAAOC,UAAP,CAAkB,KAAlB,CAPD;AAQLC,qBARK,GAQOH,IAAII,MAAJ,MAActC,KAAd,GAAsB+B,SAAtB,GAAkC7B,MAAlC,EAA4CqC,MAA5C,CAAmD,KAAnD,CARP;AASP1B,qBATO;;AAUX,gBAAIU,gBAAEiB,IAAF,CAAO;AAAA,qBAAKC,MAAMlC,IAAImC,MAAJ,CAAWC,WAAX,EAAX;AAAA,aAAP,EAA4C,CAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,OAAjC,CAA5C,CAAJ,EAA4F;AAC1F9B,0BAAYP,aAAaC,GAAb,EAAkBC,MAAlB,CAAZ;AACD;AACKoC,qBAbK,GAaO;AAChB5C,0BADgB;AAEhB+B,kCAFgB;AAGhBM,kCAHgB;AAIhBxB,yBAAWA,aAAa;AAJR,aAbP;;AAmBXN,gBAAIG,OAAJ,8BACKH,IAAIG,OADT,EAEKkC,SAFL;AAnBW,6CAuBJA,SAvBI;;AAAA;AAAA;AAAA;;AAyBXf,mBAAOgB,KAAP;AAzBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"signature.js","sourcesContent":["import R from 'ramda'\nimport crypto from 'crypto'\nimport cookie from 'cookie'\nimport { reward } from './config'\nimport getLdapUserInfo from './ldap-user-info'\n\nconst { token, secret } = reward\n\nconst DR = 'dr'\nconst BUSINESS = 'business'\nconst BM = 'bm'\n\nfunction getExtension(req, source) {\n  const addressIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n  let extension\n  if (source === BUSINESS) {\n    const { currentUser: { username: operatorName, id: operatorId } } = req.session\n    extension = `${operatorId}:${operatorName}:${addressIP}:${source}`\n    return extension\n  } else if (source === BM) {\n    const cookies = cookie.parse(R.path(['headers', 'cookie'], req))\n    const lUsertoken = cookies['L-User-Token']\n    const { operatorId, operatorNameEncode } = getLdapUserInfo(lUsertoken)\n    extension = `${operatorId}:${operatorNameEncode}:${addressIP}:${source}`\n    return extension\n  } else if (source === DR) {\n    const { admin: { username: operatorName, id: operatorId } } = req.session\n    extension = `${operatorId}:${operatorName}:${addressIP}:${source}`\n    return extension\n  }\n  return extension\n}\n\nexport default async (ctx, source, logger = console) => {\n  try {\n    // 获取request\n    let { req } = ctx\n    if (!req) req = ctx\n    // 时间戳\n    const timestamp = Date.now()\n    const md5 = crypto.createHash('md5')\n    const signature = md5.update(`${token}${timestamp}${secret}`).digest('hex')\n    let extension\n    if (R.find(v => v === req.method.toUpperCase())(['POST', 'DELETE', 'PUT', 'DEL', 'PATCH'])) {\n      extension = getExtension(req, source)\n    }\n    const addParams = {\n      token,\n      timestamp,\n      signature,\n      extension: extension || '',\n    }\n    req.headers = {\n      ...req.headers,\n      ...addParams,\n    }\n    return addParams\n  } catch (e) {\n    logger.error(e)\n    return e\n  }\n}\n"]}