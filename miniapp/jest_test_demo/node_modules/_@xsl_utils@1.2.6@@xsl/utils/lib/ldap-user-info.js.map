{"version":3,"sources":["../src/ldap-user-info.js"],"names":["decodePayload","Buffer","from","payloadToken","toString","token","tokenJson","split","payloadInfo","JSON","parse","operatorId","operatorName","roles","operatorNameEncode","encodeURI"],"mappings":";;;;;AAAA,IAAMA,gBAAgB,SAAhBA,aAAgB;AAAA,SAAgBC,OAAOC,IAAP,CAAYC,YAAZ,EAA0B,QAA1B,EAAoCC,QAApC,EAAhB;AAAA,CAAtB;;kBAEe,UAACC,KAAD,EAAW;AACxB,MAAMC,YAAYD,MAAME,KAAN,CAAY,GAAZ,CAAlB;AACA,MAAMC,cAAcR,cAAcM,UAAU,CAAV,CAAd,CAApB;;AAFwB,oBAGoBG,KAAKC,KAAL,CAAWF,WAAX,CAHpB;AAAA,MAGhBG,UAHgB,eAGhBA,UAHgB;AAAA,MAGJC,YAHI,eAGJA,YAHI;AAAA,MAGUC,KAHV,eAGUA,KAHV;;AAIxB,MAAMC,qBAAqBC,UAAUH,YAAV,CAA3B;AACA,SAAO;AACLD,0BADK;AAELC,8BAFK;AAGLC,gBAHK;AAILC;AAJK,GAAP;AAMD,C","file":"ldap-user-info.js","sourcesContent":["const decodePayload = payloadToken => Buffer.from(payloadToken, 'base64').toString()\n\nexport default (token) => {\n  const tokenJson = token.split('.')\n  const payloadInfo = decodePayload(tokenJson[1])\n  const { operatorId, operatorName, roles } = JSON.parse(payloadInfo)\n  const operatorNameEncode = encodeURI(operatorName)\n  return {\n    operatorId,\n    operatorName,\n    roles,\n    operatorNameEncode,\n  }\n}\n"]}