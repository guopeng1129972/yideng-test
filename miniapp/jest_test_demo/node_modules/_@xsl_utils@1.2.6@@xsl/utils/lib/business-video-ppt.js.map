{"version":3,"sources":["../src/business-video-ppt.js"],"names":["uid","bmDB","where","record","Error","logger","error","stack","getVideoConfig","pptUid","leftJoin","select","andWhere","records","length","images","filter","v","url","sort","v1","v2","index","map","getPptDetailByUid","uids","whereIn","ppts","R","uniqWith","ppt","title","getPptsDetailByUids","config","bmDb","global","console","log"],"mappings":"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","file":"business-video-ppt.js","sourcesContent":["import R from 'ramda'\nimport knex from 'knex'\nimport config from './config'\n\nconst bmDB = knex(config.bmDb)\nconst logger = global.logger || console.log\n\nasync function getVideoConfig(uid) {\n  try {\n    const record = (await bmDB('t_business_ppt').where({ uid }))[0]\n    if (!record) {\n      throw new Error(`表里没查到对应uid的配置，uid = ${uid}`)\n    }\n    return record\n  } catch (e) {\n    logger.error(`error in get video config, uid: ${uid}, ${e.stack}`)\n    throw new Error('该项目无录课配置')\n  }\n}\n\nasync function getPptDetailByUid(pptUid) {\n  const records = await bmDB('t_business_ppt as tp')\n    .leftJoin('t_business_ppt_image as ti', 'tp.uid', 'ti.ppt_uid')\n    .select('tp.uid as uid', 'tp.title as title', 'ti.url as url', 'ti.index as index')\n    .where('tp.uid', pptUid)\n    .andWhere('tp.status', 1)\n  if (!records.length) {\n    logger.error(`error in get ppt detail, pptUid = ${pptUid}`)\n    throw new Error('无此ppt')\n  }\n  const images = records.filter(v => v.url).sort((v1, v2) => v1.index - v2.index).map(v => v.url)\n  return { ...records[0], images }\n}\n\nasync function getPptsDetailByUids(uids) {\n  if (!uids || !uids.length) {\n    logger.error('没有提供露可配置的uids')\n    throw new Error('没有提供露可配置的uids')\n  }\n\n  const records = await bmDB('t_business_ppt as tp')\n    .leftJoin('t_business_ppt_image as ti', 'tp.uid', 'ti.ppt_uid')\n    .select('tp.uid as uid', 'tp.title as title', 'ti.url as url', 'ti.index as index')\n    .whereIn('tp.uid', uids)\n    .andWhere('tp.status', 1)\n  const ppts = R.uniqWith((v1, v2) => v1.uid === v2.uid)(records).map(ppt => ({\n    uid: ppt.uid,\n    title: ppt.title,\n    images: R.filter(record => record.uid === ppt.uid && record.url, records)\n      .sort((v1, v2) => v1.index - v2.index)\n      .map(v => v.url),\n  }))\n  return ppts\n}\n\nexport default {\n  getVideoConfig,\n  getPptDetailByUid,\n  getPptsDetailByUids,\n}\n"]}