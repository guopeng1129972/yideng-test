"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 重试一个promise 传入的参数应该是生成promise的方法 () => promise
 * 1. 如果正常返回, 返回结果
 * 2. 如果异常, 重试times次
 * 3. 重试过程中如果正常返回, 返回结果
 * 4. 如果全部重试都失败, 抛出异常
 *
 * @param promise: () => promise
 * @param times: 重试次数
 * @returns {Promise.<*>}
 */
exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref2) {
    var promise = _ref2.promise,
        _ref2$times = _ref2.times,
        times = _ref2$times === undefined ? 3 : _ref2$times;
    var errCount;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            errCount = times - 1;
            _context.prev = 1;
            _context.next = 4;
            return promise();

          case 4:
            return _context.abrupt("return", _context.sent);

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](1);

            if (!(errCount >= 0)) {
              _context.next = 13;
              break;
            }

            _context.next = 12;
            return retry({ promise: promise, times: errCount });

          case 12:
            return _context.abrupt("return", _context.sent);

          case 13:
            throw _context.t0;

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 7]]);
  }));

  function retry(_x) {
    return _ref.apply(this, arguments);
  }

  return retry;
}();

module.exports = exports["default"];
//# sourceMappingURL=retry.js.map