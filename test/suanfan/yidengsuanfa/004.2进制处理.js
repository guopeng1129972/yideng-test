/*
时间：2020年05月03日12:09:30
题目：2进制处理
输入一个整数，输出改数二进制表示中1的个数。其中负数用补码表示。
提示 先复习2进制的位运算
*/
function getNumOneNum(number) {
  let temp = number.toString(2)
  let len = temp.length;
  let result = 0;
  // 0110
  //0011 
  //1110
  for (let i = 0; i < len; i++) {
    if (temp[i] == "1") { result++ }

  }
  if (temp[0] == "1") { result-- }
  return result
}

/*
我的结果：
分析：
实际结果：

重点：
*/



// https://www.cnblogs.com/mopagunda/p/11221928.html
// 关于移位操作的博文
/*想起之前小组内的一道算法题，题目是这样的：
1.一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法？
解题思路是：

/*因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级
跳1级，剩下n-1级，则剩下跳法是f(n-1)
跳2级，剩下n-2级，则剩下跳法是f(n-2)
所以f(n)=f(n-1)+f(n-2)+...+f(1)
那么f(n-1)=f(n-2)+f(n-3)+...+f(1)

所以算法为：
*/

/*
WTF? 什么意思？
其实很简单，看下面过程

f(n)=f(n-1)+f(n-2)+...+f(1)

f(n-1)=f(n-2)+f(n-3)+...+f(1)

f(n) = 2*f(n-1) = 4 * f(n-2) = 8 * f(n-3) ..... = 2的(n-1)次方乘f(1),转为位运算即为 1 << (n - 1)
*/

function jumpFloorII(number) {
  return 1 << (number - 1);
}

/*
例如 3 << 2 的运算图示如下：
3 = 0000 0000 0000 0000 0000 0000 0000 0011
12 = 0000 0000 0000 0000 0000 0000 0000 1100
ps: 对任一数值 x 进行左移n, 相当于十进制里的乘以10的倍数，在这儿是指
x * 2^n
*/
