/*jshint esversion: 6 */
// 输出打印结果
const a = [1, 2, 3], b = [1, 2, 3], c = [1, 2, 4], d = "2", e = "11";
console.log([a == b, a === b, a > c, a < c, d > e]);
/* js存在两种比较方式
==
1.比较之前，先将两个操作数转换成两个相同的类型
===
1.类型相同并且值也相同猜想等
关系运算符 >= > < <=
1.会先将操作数转为原始值，使他们类型相同，再进行运算比较。
当两个操作数都是对象时，
7.js会比较其内部的引用，当且仅当他们的引用指向内存中的相同对象（区域）时才相等，
即他们在栈内存的引用地址相同。
8.js中的Array也是对象，所以这里a,b,c的引用显然不是相同的，所以a==b,a===b都是false
两个数组进行比较，算法是会先进行valueOf()，如果返回的是对象，在接着进行toString；
valueOf返回指定对象的原始值，a.valueOf() //(3) [1, 2, 3]
toString返回一个表示该对象的字符串，
每个对象都有一个toString方法，如果此方法在自定义的对象中未被覆盖，
toString()返回"[object type]" type是对象的类型
两个字符串之间的比较，是基于字典顺序比较的，Unicode的码点
”1,2,3“ < "1,2,4" 3的码点是51，4的码点是52,所以a<c,
同理，'2'>'11'
所以a<c
*/

//false,false,false,true,true
