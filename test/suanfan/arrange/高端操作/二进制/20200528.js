// https://www.cnblogs.com/mopagunda/p/11221928.html
/* 按位或 |
对每对比特位执行与（AND）操作。只有 a 和 b 任意一位为1时，a | b 就是 1。如下表9 | 3 = 11
9	=	1	0	0	1
3	=	0	0	1	1
11=	1	0	1	1
*/
// 1.取整操作 与0取与
let str = 2.11;
let newStr = str | 0;
console.log(newStr);//2
//2.边界判断
// 假如我们有一系列控制开关，通过 a | b | c的形式要比 '{a: true, b: true, c: true}' 简单的多
// 判断条件时可以使用
let a = 1, b = 0, c = 0;
console.log(a | b | c) //a b c任意为1都会输出1的结果

/* 按位与 &
对每对比特位执行与（AND）操作。只有 a 和 b 都为1时，a & b 就是 1。如下表9 & 3 = 1

9	=	1	0	0	1
3	=	0	0	1	1
1	=	0	0	0	1 */

/* 1.判断奇偶
我们知道奇数的二进制最后一位必然为1，所以任意一个奇数 & 1 一定等于1。 */
let num = 123;
console.log(num & 1 === 1) //1
/* 系统权限
业务场景：
我们假设某个管理系统有a, b, c, d四级权限，
其中不同帐号分别有不同的权限（可能有1个或多个），
例如admin 账户有a + b +c +d 四级权限，
guest用户有b + c权限，
那这时候应该怎么设计更简单一些呢？

按位与：是时候登场了！
基本思路：
我们把权限分别用0001, 0010, 0100, 1000表示（即最通俗的1，2，4，8），
如果admin用户有a, b, c, d四种权限，
则admin的权限为 1 | 2 | 4 | 8 = 15，
而guest用户权限为 4 | 8 = 12,
则判断用户是否有某种权限可以如下判断 */
// admin & 4 === 4
// admin & 8 === 8
// admin & 2 === 2
// admin & 1 === 1
// guest & 4 === 4
// guest & 8 === 8
// guest & 2 === 0
// guest & 1 === 0

// 按位异或 ^ 
// 对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。
/* 其运算法则相当于不带进位的二进制加法
9	=	1	0	0	1
3	=	0	0	1	1
10=	1	0	1	0 */
// 1. 切换变量0和1
// 假如我们通过某个条件来切换一个值为0或者1
function update(toggle) {
  num = toggle ? 1 : 0;
}
update(true);
// 等价于
let numm;
numm = numm ^ 1;
/* 交换两个变量的值(不用第三个变量)
let a = 5,
    b = 6;

a = a ^ b;
b = a ^ b;
a = a ^ b;

// 还可以通过运算
a = a + b;
b = a - b;
a = a - b;
原理剖析：
a = a ^ b;
b = a ^ b
相当与
b = a ^ b ^ b = a ^ (b ^ b) = a ^ 0 = a;
// es 6
[a, b] = [b, a] */

// js 的隐式转换
var num_yinshi = '1';
var num_yinshi1 = num_yinshi + '1'; //转字符串
var num_yinshi2 = 1 + num_yinshi; //转数值
var num_yinshi3 = !!1;//转布尔值

// ~~ 用于数字取整











